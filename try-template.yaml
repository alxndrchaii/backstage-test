apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: create-java-service
  title: Create a Java service
  description: Creates a deployment for Java applications

spec:
  owner: guest
  type: service

  parameters:
    - title: Choose your environment and tribe
      required:
        - environment
        - tribe
        - component
        - cpu
        - memory
        - githubToken
        - ramInitialPercentage
        - ramMaxPercentage
      properties:
        environment:
          type: string
          title: Environment
          enum:
            - production
            - staging

        tribe:
          type: string
          title: Tribe
          enum:
            - prd-alpaca
            - prd-coin

        component:
          type: string
          title: Component name (e.g., FOREIGN-STOCK-DATA)

        cpu:
          type: string
          title: CPU request
          default: "2"

        memory:
          type: string
          title: Memory request/limit
          default: "4Gi"

        ramInitialPercentage:
          type: string
          title: define InitialRAMPercentage
          default: "70%"

        ramMaxPercentage:
          type: string
          title: define MaxRAMPercentage
          default: "70%"

        githubToken:
          type: string
          title: Define your githubToken
          default: GHP_

    - title: Register Jenkins job
      properties:
        dockerfilePath:
          type: string
          title: Define a dockerfilePath in you app directory
          default: "./Dockerfile"
        disableSonarqubeStage:
          type: boolean
          title: Do you want to disable sonarqube stage?
          default: false

    - title: Open a PR
      properties:
        prTitle:
          type: string
          title: Pull Request Title
          default: "chore: scaffold dpl patch"
        prDescription:
          type: string
          title: Pull Request Description
          default: "Auto-generated patch manifest via Backstage template."

  steps:
    - id: generate-patch
      name: Generate DPL Patch YAML
      action: custom:create-github-folder
      input:
        githubToken: ${{ parameters.githubToken }}
        environment: ${{ parameters.environment }}
        tribe: ${{ parameters.tribe }}
        component: ${{ parameters.component }}
        resources:
          cpu: ${{ parameters.cpu }}
          memory: ${{ parameters.memory }}
        ramMaxPercentage: ${{ parameters.ramMaxPercentage }}
        ramInitialPercentage: ${{ parameters.ramInitialPercentage }}

    - id: register-jenkins
      name: Register Jenkins Job
      action: custom:register-jenkins-job
      input:
        githubToken: ${{ parameters.githubToken }}
        tribe: ${{ parameters.tribe }}
        component: ${{ parameters.component }}
        dockerfilePath: ${{ parameters.dockerfilePath }}
        prJob: true
        useK8s: true
        autoDeploy: false
        disableSonarqubeStage: ${{ parameters.disableSonarqubeStage }}

    - id: register-argocd-app
      name: Register ArgoCD App
      action: custom:register-argocd-app
      input:
        component: ${{ parameters.component }}
        tribe: ${{ parameters.tribe }}
        clusterName: ${{ parameters.clusterName }}
        githubToken: ${{ parameters.githubToken }}

    - id: validation
      name: Check if folder exists in GitHub
      action: custom:validate-folder-not-exists
      input:
        repoUrl: github.com/alxndrchaii/backstage-test
        folderPath: app/app/${{ parameters.environment }}/${{ parameters.tribe }}/${{ parameters.component }}
        githubToken: ${{ parameters.githubToken }}

    - id: publish-to-github
      name: Publish to GitHub PR
      action: publish:github:pull-request
      input:
        repoUrl: github.com?repo=backstage-test&owner=alxndrchaii
        branchName: scaffold/${{ parameters.component }}-${{ parameters.environment }}
        title: ${{ parameters.prTitle }}
        description: ${{ parameters.prDescription }}
        targetPath: app
        commitMessage: "chore: create dpl-patch.yaml for ${{ parameters.component }}"
        token: ${{ parameters.githubToken }}
        update: true

  output:
    links:
      - title: Pull Request Links
        url: ${{ steps['publish-to-github'].output.remoteUrl }}